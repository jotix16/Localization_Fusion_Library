////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
//         This program is the confidential and proprietary product of IAV GmbH.          //
// Any unauthorised use, reproduction or transfer of this program is strictly prohibited. //
//                                  Copyright IAV GmbH.                                   //
//             (Subject to limited distribution and restricted disclosure only.)          //
//                                   All rights reserved.                                 //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
// This file is generated by IDLCodeGenPy 1.11.1                                          //
//                                                                                        //
// Please do not modify this file by hand!                                                //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////


#ifndef __TWISTWITHCOVARIANCE_DECL_H__
#define __TWISTWITHCOVARIANCE_DECL_H__


#include "topic_includes.h"

#include "Twist.h"

#define __geometry_msgs__msg__TwistWithCovariance__idl 

#define IDL_HASH_TWISTWITHCOVARIANCE 0x31c57dc4c92a249eULL


namespace geometry_msgs {

    namespace msg {

        typedef std::array<double, 36> geometry_msgs__TwistWithCovariance__double_array_36;


#define geometry_msgs_msg_TwistWithCovariance_isPODType 1

//---------------------------------------------------------------------------
//! \class TwistWithCovariance
//!
//! \brief 
//
class TwistWithCovariance
{
public:
    //! \brief Constructor
    TwistWithCovariance();
    //! \brief Destructor
    ~TwistWithCovariance();

    //! \brief Copy constructor
    TwistWithCovariance(const geometry_msgs::msg::TwistWithCovariance &other);

    //! \brief Assignment operator
    geometry_msgs::msg::TwistWithCovariance& operator=(const geometry_msgs::msg::TwistWithCovariance &other);
#ifndef IDL_NO_PTR_ASSIGNMENT_OP
    //! \brief Assignment operator for pointer source
    inline geometry_msgs::msg::TwistWithCovariance& operator=(const geometry_msgs::msg::TwistWithCovariance *other) { *this = *other; return *this; }
#endif

    //! \brief Calculates how many bytes will be needed to serialize the object in its current state.
    std::size_t getSerializedSize() const;

    //! \brief Serialize data into 'buffer'. The buffer needs to have at least the size that getSerializedSize() returns.
    std::size_t serialize(void *buffer) const;

    //! \brief Deserialize data from buffer. The buffer needs to have at least the size that getSerializedSize() returns.
    std::size_t deserialize(const void *buffer);

    //! \brief Indicator function to signal that the class is purely made of simple data types
    static bool isPODType() { return true; }


public:
    geometry_msgs::msg::Twist twist;           
    geometry_msgs__TwistWithCovariance__double_array_36 covariance;
}; // struct: TwistWithCovariance

} // ns: msg

} // ns: geometry_msgs


#endif // __TWISTWITHCOVARIANCE_DECL_H__


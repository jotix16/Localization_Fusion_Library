////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
//         This program is the confidential and proprietary product of IAV GmbH.          //
// Any unauthorised use, reproduction or transfer of this program is strictly prohibited. //
//                                  Copyright IAV GmbH.                                   //
//             (Subject to limited distribution and restricted disclosure only.)          //
//                                   All rights reserved.                                 //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
// This file is generated by IDLCodeGenPy 1.11.1                                          //
//                                                                                        //
// Please do not modify this file by hand!                                                //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////


#include "std_msgs/msg/Time.h"
#include "std_msgs/msg/Header.h"


namespace std_msgs
{
namespace msg
{

std::size_t Header::serialize(void *pOutput) const
{
    if (!pOutput)
        return 0;
    uint8_t *buf = (uint8_t*)pOutput;

    buf += stamp.serialize(buf); // Time
    // string: frame_id
    *(uint32_t*)buf = (uint32_t)frame_id.size(); // length of string
    buf += 4;
#ifdef _WINDOWS
    frame_id._Copy_s((char *)buf, frame_id.size(), frame_id.size());
#else
    frame_id.copy((char *)buf, frame_id.size());
#endif
    buf += frame_id.size();

    return static_cast<std::size_t>(buf - (uint8_t*)pOutput);
}

std::size_t Header::deserialize(const void *pInput)
{
    if (!pInput)
        return 0;

    const uint8_t *buf = (const uint8_t*)pInput;


    buf += stamp.deserialize(buf); // Simple member stamp: Time
    { // string: frame_id
        uint32_t len = *(uint32_t*)buf;
        buf += sizeof(len);
        frame_id = std::string((const char*)buf, len);
        buf += len;
    }

    return static_cast<uint32_t>(buf - (uint8_t*)pInput);
}

//! \brief default ctor
Header::Header()
{


    frame_id.clear();

}

//! \brief dtor
Header::~Header()
{


}

//! \brief Copy constructor
Header::Header(const std_msgs::msg::Header &other)
{

    stamp = other.stamp;
    frame_id = other.frame_id;
}

std::size_t Header::getSerializedSize() const
{
	std::size_t _size_ = 0;

    _size_ += stamp.getSerializedSize();
    _size_ += 4 + frame_id.length(); 

    return _size_;
}

#ifndef IDL_NO_PTR_ASSIGNMENT_OP
std_msgs::msg::Header& Header::operator=(const std_msgs::msg::Header &other)
{
    if (this != &other)
    {
        stamp = other.stamp;
        frame_id = other.frame_id;
    }
    return *this;
}
#endif //IDL_NO_PTR_ASSIGNMENT_OP
} // ns: msg

} // ns: std_msgs


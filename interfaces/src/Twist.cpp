////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
//         This program is the confidential and proprietary product of IAV GmbH.          //
// Any unauthorised use, reproduction or transfer of this program is strictly prohibited. //
//                                  Copyright IAV GmbH.                                   //
//             (Subject to limited distribution and restricted disclosure only.)          //
//                                   All rights reserved.                                 //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
// This file is generated by IDLCodeGenPy 1.11.1                                          //
//                                                                                        //
// Please do not modify this file by hand!                                                //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////


#include "geometry_msgs/msg/Vector3.h"
#include "geometry_msgs/msg/Twist.h"


namespace geometry_msgs
{
namespace msg
{

std::size_t Twist::serialize(void *pOutput) const
{
    if (!pOutput)
        return 0;
    uint8_t *buf = (uint8_t*)pOutput;

    buf += linear.serialize(buf); // Vector3
    buf += angular.serialize(buf); // Vector3

    return static_cast<std::size_t>(buf - (uint8_t*)pOutput);
}

std::size_t Twist::deserialize(const void *pInput)
{
    if (!pInput)
        return 0;

    const uint8_t *buf = (const uint8_t*)pInput;


    buf += linear.deserialize(buf); // Simple member linear: Vector3
    buf += angular.deserialize(buf); // Simple member angular: Vector3
    return static_cast<uint32_t>(buf - (uint8_t*)pInput);
}

//! \brief default ctor
Twist::Twist()
{



}

//! \brief dtor
Twist::~Twist()
{


}

//! \brief Copy constructor
Twist::Twist(const geometry_msgs::msg::Twist &other)
{

    linear = other.linear;
    angular = other.angular;}

std::size_t Twist::getSerializedSize() const
{
	std::size_t _size_ = 0;

    _size_ += linear.getSerializedSize();
    _size_ += angular.getSerializedSize();
    return _size_;
}

#ifndef IDL_NO_PTR_ASSIGNMENT_OP
geometry_msgs::msg::Twist& Twist::operator=(const geometry_msgs::msg::Twist &other)
{
    if (this != &other)
    {
        linear = other.linear;
        angular = other.angular;
    }
    return *this;
}
#endif //IDL_NO_PTR_ASSIGNMENT_OP
} // ns: msg

} // ns: geometry_msgs


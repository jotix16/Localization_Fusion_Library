////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
//         This program is the confidential and proprietary product of IAV GmbH.          //
// Any unauthorised use, reproduction or transfer of this program is strictly prohibited. //
//                                  Copyright IAV GmbH.                                   //
//             (Subject to limited distribution and restricted disclosure only.)          //
//                                   All rights reserved.                                 //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
// This file is generated by IDLCodeGenPy 1.11.1                                          //
//                                                                                        //
// Please do not modify this file by hand!                                                //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////


#include "geometry_msgs/msg/PoseWithCovariance.h"
#include "geometry_msgs/msg/TwistWithCovariance.h"
#include "std_msgs/msg/Header.h"
#include "nav_msgs/msg/Odometry.h"


namespace nav_msgs
{
namespace msg
{

std::size_t Odometry::serialize(void *pOutput) const
{
    if (!pOutput)
        return 0;
    uint8_t *buf = (uint8_t*)pOutput;

    buf += header.serialize(buf); // Header
    // string: child_frame_id
    *(uint32_t*)buf = (uint32_t)child_frame_id.size(); // length of string
    buf += 4;
#ifdef _WINDOWS
    child_frame_id._Copy_s((char *)buf, child_frame_id.size(), child_frame_id.size());
#else
    child_frame_id.copy((char *)buf, child_frame_id.size());
#endif
    buf += child_frame_id.size();
    buf += pose.serialize(buf); // PoseWithCovariance
    buf += twist.serialize(buf); // TwistWithCovariance

    return static_cast<std::size_t>(buf - (uint8_t*)pOutput);
}

std::size_t Odometry::deserialize(const void *pInput)
{
    if (!pInput)
        return 0;

    const uint8_t *buf = (const uint8_t*)pInput;


    buf += header.deserialize(buf); // Simple member header: Header
    { // string: child_frame_id
        uint32_t len = *(uint32_t*)buf;
        buf += sizeof(len);
        child_frame_id = std::string((const char*)buf, len);
        buf += len;
    }

    buf += pose.deserialize(buf); // Simple member pose: PoseWithCovariance
    buf += twist.deserialize(buf); // Simple member twist: TwistWithCovariance
    return static_cast<uint32_t>(buf - (uint8_t*)pInput);
}

//! \brief default ctor
Odometry::Odometry()
{


    child_frame_id.clear();



}

//! \brief dtor
Odometry::~Odometry()
{




}

//! \brief Copy constructor
Odometry::Odometry(const nav_msgs::msg::Odometry &other)
{

    header = other.header;
    child_frame_id = other.child_frame_id;

    pose = other.pose;
    twist = other.twist;}

std::size_t Odometry::getSerializedSize() const
{
	std::size_t _size_ = 0;

    _size_ += header.getSerializedSize();
    _size_ += 4 + child_frame_id.length(); 

    _size_ += pose.getSerializedSize();
    _size_ += twist.getSerializedSize();
    return _size_;
}

#ifndef IDL_NO_PTR_ASSIGNMENT_OP
nav_msgs::msg::Odometry& Odometry::operator=(const nav_msgs::msg::Odometry &other)
{
    if (this != &other)
    {
        header = other.header;
        child_frame_id = other.child_frame_id;
        pose = other.pose;
        twist = other.twist;
    }
    return *this;
}
#endif //IDL_NO_PTR_ASSIGNMENT_OP
} // ns: msg

} // ns: nav_msgs


////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
//         This program is the confidential and proprietary product of IAV GmbH.          //
// Any unauthorised use, reproduction or transfer of this program is strictly prohibited. //
//                                  Copyright IAV GmbH.                                   //
//             (Subject to limited distribution and restricted disclosure only.)          //
//                                   All rights reserved.                                 //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                        //
// This file is generated by IDLCodeGenPy 1.11.1                                          //
//                                                                                        //
// Please do not modify this file by hand!                                                //
//                                                                                        //
////////////////////////////////////////////////////////////////////////////////////////////


#include "std_msgs/msg/Time.h"


namespace std_msgs
{
namespace msg
{

std::size_t Time::serialize(void *pOutput) const
{
    if (!pOutput)
        return 0;
    uint8_t *buf = (uint8_t*)pOutput;

    *(int32_t*)buf = sec;
    buf += 4;
    *(uint32_t*)buf = nanosec;
    buf += 4;

    return static_cast<std::size_t>(buf - (uint8_t*)pOutput);
}

std::size_t Time::deserialize(const void *pInput)
{
    if (!pInput)
        return 0;

    const uint8_t *buf = (const uint8_t*)pInput;


    sec = *reinterpret_cast<const int32_t*>(buf);
    buf += 4;
    nanosec = *reinterpret_cast<const uint32_t*>(buf);
    buf += 4;
    return static_cast<uint32_t>(buf - (uint8_t*)pInput);
}

//! \brief default ctor
Time::Time()
{

    sec = 0;
    nanosec = 0;
}

//! \brief dtor
Time::~Time()
{


}

//! \brief Copy constructor
Time::Time(const std_msgs::msg::Time &other)
{

    sec = other.sec;
    nanosec = other.nanosec;}

std::size_t Time::getSerializedSize() const
{
	std::size_t _size_ = 0;

    _size_ += 4;
    _size_ += 4;
    return _size_;
}

#ifndef IDL_NO_PTR_ASSIGNMENT_OP
std_msgs::msg::Time& Time::operator=(const std_msgs::msg::Time &other)
{
    if (this != &other)
    {
        sec = other.sec;
        nanosec = other.nanosec;
    }
    return *this;
}
#endif //IDL_NO_PTR_ASSIGNMENT_OP
} // ns: msg

} // ns: std_msgs

